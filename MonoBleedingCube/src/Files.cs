using MagmaMc.MagmaSimpleConfig;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Windows.Forms;

namespace MonoBleedingCube
{
    class Files
    {
        public MagmaSimpleConfig Config { get; private set; }
        public string Dir { get; private set; }

        public bool Usable { get; private set; } = false;
        private List<string> Copy_Files = new List<string>();
        private List<string> Overwrite_Files = new List<string>();
        private List<string> ZIP_Files = new List<string>();

        public Files(MagmaSimpleConfig config)
        {
            Config = config;
            Dir = (string)Config.GetValue("AppName", Section: "MonoBleedingCube") + "_Data\\MonoBleedingCube-Data\\";
        }

        public void Setup()
        {
            try
            {
                Usable = true;
                DirectoryInfo Game = new DirectoryInfo((string)Config.GetValue("AppName", Section: "MonoBleedingCube") + "_Data");
                DirectoryInfo MBC_Data = Game.CreateSubdirectory("MonoBleedingCube-Data");
                MBC_Data.CreateSubdirectory("Copy");
                MBC_Data.CreateSubdirectory("ZIP");
                MBC_Data.CreateSubdirectory("Overwrite");
                MBC_Data.CreateSubdirectory("CopyOnce");
            }
            catch { }
        }


        public void FilesToGame()
        {
            if (!Usable) return;
            Copy_Files = new List<string>();
            Overwrite_Files = new List<string>();
            ZIP_Files = new List<string>();

            Copy_Files.AddRange(Utils.CopyDirectory(Dir + "Copy\\", "./", true));
            Overwrite_Files.AddRange(Utils.CopyDirectory(Dir + "Overwrite\\", "./", true));

            Utils.CopyDirectory(Dir + "CopyOnce\\", "./", true);
            
            try
            {
                Directory.CreateDirectory(Dir + "ZIP\\Temp\\");
            }
            catch { }
            foreach (FileInfo FileName in new DirectoryInfo(Dir+"ZIP\\").GetFiles())
            {
                try
                {
                    ZipFile.ExtractToDirectory(FileName.FullName, Dir + "ZIP\\Temp\\");
                } catch { }
                ZIP_Files.AddRange(Utils.CopyDirectory(Dir + "ZIP\\Temp\\", "./", true));
            }
        }
        public void FilesToStore()
        {
            if (!Usable) return;
            Utils.CopyDirectory("./", Dir + "ZIP\\Temp\\", true, Utils.DirectoryConvertList(ZIP_Files, "./").ToArray());

            foreach(string Filename in Overwrite_Files)
            {
                try { File.Delete(Filename); } catch { }
            }
            foreach(string Filename in Copy_Files)
            {
                try { File.Move(Filename, Dir + "Copy\\" + Filename); } catch { }
            }
            try
            {
                Directory.Delete(Dir + "ZIP\\TEMP\\", true);
                Directory.CreateDirectory(Dir + "ZIP\\TEMP\\");
            } catch { }
            foreach (string Filename in ZIP_Files)
            {
                try
                {
                    File.Move(Filename, Dir + "ZIP\\TEMP\\" + Filename);

                    File.Delete(Filename);

                }
                catch { }
                try
                {
                    Directory.Move(Filename, Dir + "ZIP\\TEMP\\" + Filename);

                    Directory.Delete(Filename, true);
                }
                catch { }

            }
            foreach (string item in Directory.GetFiles(Dir + "ZIP\\"))
            {
                Console.WriteLine(item);
                File.Delete(item);
            }
            ZipFile.CreateFromDirectory(Dir + "ZIP\\TEMP\\", Dir + "ZIP\\AutoGenerated.zip");
            Directory.Delete(Dir + "ZIP\\TEMP\\", true);
        }
    }
}
